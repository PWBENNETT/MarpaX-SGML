:default ::= action => [values] bless => ::lhs
lexeme default = action => [start,length,value] bless => ::name
:start ::= Document
:discard ~ whitespace
:discard ~ Comment
Document ::= Shebang? LanguageDeclaration? Body
Shebang ~ '#!' AbsoluteFilePath ShebangParams? eol+
ShebangParams ~ ' ' ShebangParamList
ShebangParamList ~ ShebangParam ' ' ShebangParamList
                 | ShebangParam
ShebangParam ~ [\p{Graph}]+
LanguageDeclaration ~ '#language ' URI ';'
Body ::= Pragma* DefaultRelationDeclaration? Pragma* ElementList ';'?
Subset ::= WrappedBody Transformed*
WrappedBody ::= '{' Body '}' assoc => group
Transformed ::= modifiedby Transform
Pragma ~ PragmaBody ';'
PragmaBody ~ '#include ' FileURL
           | '#import ' FileURL
           | '#layout ' FileURI
           | '#glyphs ' FileURL
DefaultRelationDeclaration ~ '#using ' RelationID ';'
FileURL ~ quo FilePath quo assoc => group
        | URL
FileURI ~ quo FilePath quo assoc => group
        | URI
FilePath ~ RelativeFilePath
         | AbsoluteFilePath
AbsoluteFilePath ~ FSRoot RelativeFilePath
RelativeFilePath ~ PathPart PathContinuation* PathSep Filename
PathContinuation ~ PathSep PathPart
URI ~ URSpec+ [^:\s] [\S]*
URL ~ URSpec [^:\s] [\S]*
URSpec ~ [\w]+ ':'
Element ::= Declaration
          | Graph
          | Subset
ElementList ::= Element ';' ElementList
              | Element
Comment ~ '/*' any '*/' assoc => group
Declaration ::= Variable equals Subset
              | Variable equals Clause
              | Variable equals Graph
              | Macro copies Subset
              | Macro copies Clause
              | Macro copies Graph
              | TransformID lookslike TransformDef
              | AppearanceID lookslike AppearanceDef
              | InterfaceID lookslike InterfaceDef
              | RelationID has Appearance DerivedAppearance*
              | GlyphID has Profile DerivedProfile*
              | RelationID is RelationID DerivedAppearance+ Transformed*
              | GlyphID is GlyphID DerivedProfile+ Transformed*
Profile ::= Appearance
          | Interface
DerivedProfile ~ with_without Appearance
               | with_without Interface
with_without ~ with
             | without
DerivedAppearance ~ with_without Appearance
InterfaceDef ::= '(' PortList ')' assoc => group
PortList ::= Port ',' PortList
           | Port
AppearanceDef ::= '[' FeatureList ']' assoc => group
FeatureList ::= Feature FeatureList
              | Feature
Transform ::= TransformID
            | TransformDef
Interface ::= InterfaceID
            | InterfaceDef
Appearance ::= AppearanceID
             | AppearanceDef
Graph ::= LHS Edge MiddleEdge? RHS Transformed*
MiddleEdge ::= MHS Edge MiddleEdge
             | MHS Edge
LHS ::= LHSJoin
      | Joinable ParenedLHSJoin?
ParenedLHSJoin ::= '(' LHSJoin ')' assoc => group
LHSJoin ::= Glyph Join?
MHS ::= Join? Glyph Join?
      | ParenedRHSJoin? Joinable ParenedLHSJoin?
RHS ::= RHSJoin
      | ParenedRHSJoin? Joinable
ParenedRHSJoin ::= '(' RHSJoin ')' assoc => group
RHSJoin ::= Join? Glyph
Join ::= '(' Port ')' assoc => group
Joinable ::= Clause
           | Reference
Glyph ::= GlyphID
        | Reference
Reference ::= Macro
            | Variable
Edge ::= RelSource Relationship RelTarget assoc => group
       | DefaultRelation
DefaultRelation ~ '->' bless => DefaultRelation
                | '<->' bless => DefaultRelationBidi
RelSource ~ '-[' bless => RelSource
          | '<-[' bless => RelSourceBidi
RelTarget ~ ']->'
Relationship ::= RelationIDList
               | Relationship DerivedAppearance
RelationIDList ::= RelationID ',' RelationIDList
                 | RelationID
TransformDef ::= '[' IndividualTransformList ']' assoc => group
IndividualTransformList ::= IndividualTransform ',' IndividualTransformList
                          | IndividualTransform
IndividualTransform ::= Condition? TypedTransform
Condition ::= FeatureExpression '?'
TypedTransform ::= RelationID becomes RelationID
                 | Clause becomes Clause
                 | Graph becomes Graph
                 | AppearanceSource? Appearance
AppearanceSource ::= Appearance becomes
FeatureExpression ::= FeatureExpressionList
                    | '(' FeatureExpression ')' assoc => group
FeatureExpressionList ::= DefiniteFeature 'or' FeatureExpression
                        | DefiniteFeature FeatureExpression
                        | DefiniteFeature
Feature ::= DefiniteFeature
          | undef FeatureID
DefiniteFeature ::= set FeatureID
                  | clear FeatureID
Clause ::= WrappedGraphList Transformed*
WrappedGraphList ::= '(' GraphList ')' assoc => group
GraphList ::= Graph ',' GraphList
            | Graph
Variable ~ PfxVariable Name
         | PfxVariable Number
         | Name
Macro ~ Name
TransformID ~ PfxTransform Name
            | PfxTransform Number
            | Name
GlyphID ~ PfxGlyph Name
        | PfxGlyph Number
        | Name
RelationID ~ PfxRelation Name
           | PfxRelation Number
           | Name
FeatureID ~ PfxFeature Name
          | PfxFeature Number
          | Name
InterfaceID ~ PfxInterface Name
            | PfxInterface Number
            | Name
AppearanceID ~ PfxAppearance Name
             | PfxAppearance Number
             | Name
Port ~ PfxPort Name
     | PfxPort Number
     | Name
PfxTransform ~ '!'
PfxVariable ~ '$'
PfxGlyph ~ '#'
PfxRelation ~ '&'
PfxFeature ~ '%'
PfxInterface ~ '@:'
PfxAppearance ~ '%:'
PfxPort ~ '@'
Number ~ [\p{Digit}]+
Name ~ NMSTART NMCHAR? PRIME*
NMSTART ~ [\p{Letter}_]
NMCHAR ~  [\p{Letter}\p{Digit}_.\@\$\%\\/:+-]* [\p{Letter}\p{Digit}_]
PRIME ~ [\x{27}\x{2B9}\x{2BC}\x{2C8}\x{2CA}\x{2019}\x{2032}]
whitespace ~ [\p{Separator}]+
quo ~ [']
any ~ [\p{Assigned}]+
eol ~ '\n'
equals ~ '='
copies ~ ':'
lookslike ~ '~'
has ~ 'has'
is ~ 'is'
with ~ ' +'
without ~ ' -'
set ~ '+'
clear ~ '-'
undef ~ '~'
becomes ~ '>'
modifiedby ~ '*'
