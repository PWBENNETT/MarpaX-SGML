:start ::= Document
:discard ~ whitespace
:discard ~ Comment
Document ::= Shebang? LanguageDeclaration? Body
Shebang ~ '#!' AbsoluteFilePath ShebangParams? eol+
ShebangParams ~ ' ' ShebangParamList
ShebangParamList ~ ShebangParam ' ' ShebangParamList
                 | ShebangParam
ShebangParam ~ [\p{Graph}]+
LanguageDeclaration ~ '#language ' URI ';'
Body ::= Pragma* DefaultRelationDeclaration? Pragma* ElementList ';'?
Subset ::= '{' Body '}' Transformed*
Transformed ::= modifiedby Transform
Pragma ~ PragmaBody ';'
PragmaBody ~ '#include ' FileURL
           | '#import ' FileURL
           | '#layout ' FileURI
           | '#glyphs ' FileURL
DefaultRelationDeclaration ~ '#using ' RelationID ';'
FileURL ~ quo FilePath quo
        | URL
FileURI ~ quo FilePath quo
        | URI
FilePath ~ RelativeFilePath
         | AbsoluteFilePath
AbsoluteFilePath ~ FSRoot RelativeFilePath
RelativeFilePath ~ PathPart PathContinuation* PathSep Filename
PathContinuation ~ PathSep PathPart
Element ::= Declaration
          | Graph
          | Subset
ElementList ::= Element ';' ElementList
              | Element
Comment ~ '/*' any '*/'
Declaration ::= Variable equals Subset
              | Variable equals Clause
              | Macro copies Subset
              | Macro copies Clause
              | TransformID lookslike TransformDef
              | AppearanceID lookslike AppearanceDef
              | InterfaceID lookslike InterfaceDef
              | RelationID has Appearance DerivedAppearance*
              | GlyphID has Profile DerivedProfile*
              | RelationID is RelationID DerivedAppearance+
              | GlyphID is GlyphID DerivedProfile+
Profile ::= Appearance
          | Interface
DerivedProfile ~ with_without Appearance
               | with_without Interface
               | Transformed
with_without ~ with
             | without
DerivedAppearance ::= with_without Appearance
InterfaceDef ::= '(' PortList ')'
PortList ::= Port ',' PortList
           | Port
AppearanceDef ::= '[' FeatureList ']'
FeatureList ::= Feature ' ' FeatureList
              | Feature
Transform ::= TransformID
            | TransformDef
Interface ::= InterfaceID
            | InterfaceDef
Appearance ::= AppearanceID
             | AppearanceDef
Graph ::= LHS Edge MiddleEdge? RHS Transformed*
MiddleEdge ::= MHS Edge MiddleEdge
             | MHS Edge
LHS ::= LHSJoin
      | Joinable ParenedLHSJoin?
ParenedLHSJoin ::= '(' LHSJoin ')'
LHSJoin ::= Glyph Join?
MHS ::= Join? Glyph Join?
      | ParenedRHSJoin? Joinable ParenedLHSJoin?
RHS ::= RHSJoin
      | ParenedRHSJoin? Joinable
ParenedRHSJoin ::= '(' RHSJoin ')'
RHSJoin ::= Join? Glyph
Join ::= '(' Port ')'
Joinable ::= Clause
           | Reference
Glyph ::= GlyphID
        | Reference
Reference ::= Macro
            | Variable
Edge ::= RelSource Relationship RelTarget
       | DefaultRelation
DefaultRelation ::= '->'
                  | '-->'
                  | '<->'
                  | '<-->'
RelSource ::= '-['
            | '--['
            | '<-['
RelTarget ::= ']->'
Relationship ::= RelationIDList
               | Relationship with_without Appearance
RelationIDList ::= RelationID ',' RelationIDList
                 | RelationID
TransformDef ::= '[' IndividualTransformList ']'
IndividualTransformList ::= IndividualTransform ',' IndividualTransformList
                          | IndividualTransform
IndividualTransform ::= Condition? TypedTransform
Condition ::= FeatureExpression '?'
TypedTransform ::= Relationship becomes Relationship
                 | Clause becomes Clause
                 | Graph becomes Graph
                 | AppearanceSource? Appearance
AppearanceSource ::= Appearance becomes
FeatureExpression ::= FeatureExpressionList
                    | '(' FeatureExpression ')'
FeatureExpressionList ::= DefiniteFeature 'or' FeatureExpression
                        | DefiniteFeature FeatureExpression
                        | DefiniteFeature
Feature ::= DefiniteFeature
          | undef FeatureID
DefiniteFeature ::= set FeatureID
                  | clear FeatureID
Clause ::= '(' GraphList ')'
GraphList ::= Graph ',' GraphList
            | Graph
Variable ~ PfxVariable Name
         | PfxVariable Number
         | Name
Macro ::= Name
Transform ::= Name
GlyphID ~ PfxGlyph Name
        | PfxGlyph Number
        | Name
RelationID ~ PfxRelation Name
           | PfxRelation Number
           | Name
FeatureID ~ '%'? Name
          | '%' Number
InterfaceID ~ '@:'? Name
            | '@:' Number
AppearanceID ~ '%:'? Name
             | '%:' Number
Port ~ '@'? Name
     | '@' Number
PfxVariable ~ '$'
PfxGlyph ~ '#'
PfxRelation ~ '&'
Number ~ [\p{Digit}]+
Name ~ NMSTART NMCHAR? PRIME*
NMSTART ~ [\p{Letter}_]
NMCHAR ~  [\p{Letter}\p{Digit}_.\@\$\%/:+-]* [\p{Letter}\p{Digit}_]
PRIME ~ [\x{27}\x{2B9}\x{2BC}\x{2C8}\x{2CA}\x{2019}\x{2032}]
whitespace ~ [\p{Separator}]+
quo ~ [']
any ~ [\p{Assigned}]+
eol ~ '\n'
equals ~ '='
copies ~ ':'
lookslike ~ '~'
has ~ 'has'
is ~ 'is'
with ~ '+'
without ~ '-'
set ~ '+'
clear ~ '-'
undef ~ '~'
becomes ~ '>'
modifiedby ~ '*'
